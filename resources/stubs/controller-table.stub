<?php

namespace App\Http\Livewire\{{modelName}};

use App\Models\{{modelName}};
use Livewire\Component;
use Livewire\WithPagination;

class {{modelName}}Table extends Component
{
    use WithPagination;

    public $sortBy = '{{cols1}}';

    public $sortDirection = 'asc';
    public $perPage = 10;
    public $search = '';
    protected $paginationTheme = 'bootstrap';
    protected $listeners = [
        '{{modelNameSingularLowerCase}}Stored' => 'render',
        '{{modelNameSingularLowerCase}}Updated' => 'render',
        'formReset' => 'render'
    ];

    public function render()
    {

        return view('livewire.{{modelNameSingularLowerCase}}.{{modelNameSingularLowerCase}}-table', [
            'items' => $this->search == '' ? {{modelName}}::query()
                ->orderBy($this->sortBy, $this->sortDirection)
                ->paginate($this->perPage) : {{modelName}}::query()
                ->where('{{cols1}}', 'like', '%' . $this->search . '%')
                ->orderBy($this->sortBy, $this->sortDirection)
                ->paginate($this->perPage)
        ]);
    }


    public function sortBy($field)
    {
        if ($this->sortDirection == 'asc') {
            $this->sortDirection = 'desc';
        } else {
            $this->sortDirection = 'asc';
        }

        return $this->sortBy = $field;
    }

    public function updatingSearch()
    {
        $this->resetPage();
    }

    public function update($id)
    {
        $this->emit('update{{modelName}}', $id);
    }

    public function delete($id)
    {
        {{modelName}}::destroy($id);
    }

    public function clearSearch()
    {
        $this->search = '';
        $this->resetPage();
    }
}
